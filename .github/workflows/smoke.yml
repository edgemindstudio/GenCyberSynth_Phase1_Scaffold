# .github/workflows/smoke.yml
name: Smoke (synth+eval)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      smoke_model:
        description: "Model to smoke-test (gan, diffusion, vae, autoregressive, maskedautoflow, restrictedboltzmann, gaussianmixture)"
        type: string
        default: "gan"
      cfg:
        description: "Config path"
        type: string
        default: "configs/config.yaml"

jobs:
  smoke:
    name: smoke â€¢ ${{ inputs.smoke_model || 'gan' }}
    runs-on: ubuntu-latest
    env:
      CUDA_VISIBLE_DEVICES: ""
      TF_CPP_MIN_LOG_LEVEL: "2"
      # fallbacks for push/PR events
      SMOKE_MODEL: ${{ inputs.smoke_model || 'gan' }}
      CFG: ${{ inputs.cfg || 'configs/config.yaml' }}

    steps:
      - name: Checkout repo (with LFS + submodules)
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: recursive

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prepare CI requirements file (strip git+ssh / gcs-core)
        run: |
          awk '!/gcs-core/ && !/git\+ssh/' requirements.txt > requirements.ci.txt
          cat requirements.ci.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.ci.txt

      - name: Add gcs-core to PYTHONPATH (submodule path)
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/gcs-core:$PYTHONPATH" >> $GITHUB_ENV

      - name: Show versions
        run: |
          python - <<'PY'
          import sys
          print("Python:", sys.version)
          try:
              import tensorflow as tf; print("TensorFlow:", tf.__version__)
          except Exception as e:
              print("TF import failed:", e)
          try:
              import gcs_core; print("gcs_core:", gcs_core.__file__)
          except Exception as e:
              print("gcs_core import failed:", e)
          PY

      - name: Smoke test (synth + eval) - ${{ env.SMOKE_MODEL }}
        run: make smoke SMOKE_MODEL="${SMOKE_MODEL}" CFG="${CFG}"

      - name: Collect scores table
        if: always()
        run: |
          mkdir -p ci_out
          python scripts/collect_scores.py || true
          cp -r artifacts ci_out/artifacts || true
          cp artifacts/phase1_scores.csv ci_out/ 2>/dev/null || true

      - name: Upload artifacts (summaries, grids, table)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: ci_out
          if-no-files-found: warn
